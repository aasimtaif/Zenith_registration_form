{"ast":null,"code":"// import React, { useState } from 'react'\n// // import { db } from './fireBaseConfig';\n// // import { collection, addDoc } from \"firebase/firestore\";\n// import { db, storage } from \"./fireBaseConfig\"\n// import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\n// import Input from '@mui/material/Input';\n// import Button from '@mui/material/Button';\n\n// // Create an initial document to update.\n// function Form() {\n//     const [Input, setInput] = useState();\n//     const [image, setImage] = useState();\n//     const handleFile = (e) => {\n//         if (e.target.files[0]) {\n//             setImage( e.target.files[0] )\n//             // console.log(file);\n//         }\n//     }\n//     const handleUpload = () => {\n//         console.log(\"imageUploading\")\n//         if (!image) {\n//             console.log(\"image not found\");\n//             return\n//         }\n//         const storageRef = ref(storage, `images/${image.name}`)\n//         const uploadTask = uploadBytesResumable(storageRef, image)\n//         console.log(image)\n//         uploadTask.on(\n//             \"state_changed\",\n//             (snapshot) => {\n//                 const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100\n//                 // setProgress(prog)\n//             },\n//             (err) => {\n//                 console.log(err)\n//                 alert(err)\n//             },\n//             () => {\n//                 getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n//                     const docRef = await addDoc(collection(db, \"info\"), {\n//                         timestamp: serverTimestamp(),\n\n//                         imageurl: downloadURL\n//                     });\n//                     console.log(\"Document written with ID: \", docRef.id);\n//                     // setUrl(downloadURL)\n//                     console.log('File available at', downloadURL);\n//                 });\n\n//             }\n//         )\n//         console.log('hello')\n\n//     }\n//     // console.log(file);\n//     // const uploadDocument = async () => {\n//     //     const docRef = await addDoc(collection(db, \"teamInfo\"), {\n//     //         name: \"Tokyo\",\n//     //         sport: \"Cricket\",\n//     //         imageUrl:\"qwerer\",\n//     //         contact:\"262265444\"\n//     //     });\n//     //     console.log(\"Document written with ID: \", docRef.id);\n//     // }\n//     // uploadDocument();\n//     const handleChange = (e)=>{\n\n//     }\n\n//     return (\n//         <>\n\n// <Button>Submit</Button>\n//         </>\n//     )\n// }\n\n// export default Form","map":{"version":3,"names":[],"sources":["/home/mohdasim/code/asus laptop/zenith/zenith-web/src/MaterialUi.js"],"sourcesContent":["// import React, { useState } from 'react'\n// // import { db } from './fireBaseConfig';\n// // import { collection, addDoc } from \"firebase/firestore\";\n// import { db, storage } from \"./fireBaseConfig\"\n// import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\n// import Input from '@mui/material/Input';\n// import Button from '@mui/material/Button';\n\n// // Create an initial document to update.\n// function Form() {\n//     const [Input, setInput] = useState();\n//     const [image, setImage] = useState();\n//     const handleFile = (e) => {\n//         if (e.target.files[0]) {\n//             setImage( e.target.files[0] )\n//             // console.log(file);\n//         }\n//     }\n//     const handleUpload = () => {\n//         console.log(\"imageUploading\")\n//         if (!image) {\n//             console.log(\"image not found\");\n//             return\n//         }\n//         const storageRef = ref(storage, `images/${image.name}`)\n//         const uploadTask = uploadBytesResumable(storageRef, image)\n//         console.log(image)\n//         uploadTask.on(\n//             \"state_changed\",\n//             (snapshot) => {\n//                 const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100\n//                 // setProgress(prog)\n//             },\n//             (err) => {\n//                 console.log(err)\n//                 alert(err)\n//             },\n//             () => {\n//                 getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n//                     const docRef = await addDoc(collection(db, \"info\"), {\n//                         timestamp: serverTimestamp(),\n\n//                         imageurl: downloadURL\n//                     });\n//                     console.log(\"Document written with ID: \", docRef.id);\n//                     // setUrl(downloadURL)\n//                     console.log('File available at', downloadURL);\n//                 });\n\n\n//             }\n//         )\n//         console.log('hello')\n\n//     }\n//     // console.log(file);\n//     // const uploadDocument = async () => {\n//     //     const docRef = await addDoc(collection(db, \"teamInfo\"), {\n//     //         name: \"Tokyo\",\n//     //         sport: \"Cricket\",\n//     //         imageUrl:\"qwerer\",\n//     //         contact:\"262265444\"\n//     //     });\n//     //     console.log(\"Document written with ID: \", docRef.id);\n//     // }\n//     // uploadDocument();\n//     const handleChange = (e)=>{\n\n//     }\n\n//     return (\n//         <>\n      \n// <Button>Submit</Button>\n//         </>\n//     )\n// }\n\n// export default Form"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}