{"ast":null,"code":"var _jsxFileName = \"/home/mohdasim/code/asus laptop/zenith/zenith-web/src/UploadImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Input from '@mui/material/Input';\nimport Button from '@mui/material/Button';\nimport { db, storage } from \"./fireBaseConfig\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadImage() {\n  _s();\n  const [image, setImage] = useState();\n  const uploadImage = () => {\n    setImage(ev);\n  };\n  console.log(\"imageUploading\");\n  if (!image) {\n    console.log(\"image not found\");\n    return;\n  }\n  const storageRef = ref(storage, `images/${image.name}`);\n  const uploadTask = uploadBytesResumable(storageRef, image);\n  console.log(image);\n  uploadTask.on(\"state_changed\", snapshot => {\n    const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    // setProgress(prog)\n  }, err => {\n    console.log(err);\n    alert(err);\n  }, () => {\n    getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n      const docRef = await addDoc(collection(db, \"info\"), {\n        timestamp: serverTimestamp(),\n        imageurl: downloadURL\n      });\n      console.log(\"Document written with ID: \", docRef.id);\n      // setUrl(downloadURL)\n      console.log('File available at', downloadURL);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"button\",\n      onClick: uploadImage,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadImage, \"rw6qng99rwBYv/BMRhLONeRFue4=\");\n_c = UploadImage;\nexport default UploadImage;\nvar _c;\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"names":["React","useState","Input","Button","db","storage","ref","uploadBytesResumable","getDownloadURL","collection","addDoc","serverTimestamp","UploadImage","image","setImage","uploadImage","ev","console","log","storageRef","name","uploadTask","on","snapshot","prog","Math","round","bytesTransferred","totalBytes","err","alert","then","downloadURL","docRef","timestamp","imageurl","id"],"sources":["/home/mohdasim/code/asus laptop/zenith/zenith-web/src/UploadImage.js"],"sourcesContent":["import React,{useState} from 'react'\nimport Input from '@mui/material/Input';\nimport Button from '@mui/material/Button';\nimport { db, storage } from \"./fireBaseConfig\"\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\n\nfunction UploadImage() {\n    const [image, setImage] = useState();\n    const uploadImage = () => {\nsetImage(ev)\n    }\n    console.log(\"imageUploading\")\n    if (!image) {\n        console.log(\"image not found\");\n        return\n    }\n    const storageRef = ref(storage, `images/${image.name}`)\n    const uploadTask = uploadBytesResumable(storageRef, image)\n    console.log(image)\n    uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n            const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100\n            // setProgress(prog)\n        },\n        (err) => {\n            console.log(err)\n            alert(err)\n        },\n        () => {\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                const docRef = await addDoc(collection(db, \"info\"), {\n                    timestamp: serverTimestamp(),\n\n                    imageurl: downloadURL\n                });\n                console.log(\"Document written with ID: \", docRef.id);\n                // setUrl(downloadURL)\n                console.log('File available at', downloadURL);\n            });\n\n\n        }\n    )\n    return (\n        <div>\n            <Input type=\"file\" />\n            <Button type=\"button\" onClick={uploadImage}>Submit</Button>\n\n        </div>\n    )\n}\n\nexport default UploadImage"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,EAAE,EAAEC,OAAO,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAC5E,SAASC,UAAU,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAoB;AAAC;AAEzE,SAASC,WAAW,GAAG;EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,EAAE;EACpC,MAAMc,WAAW,GAAG,MAAM;IAC9BD,QAAQ,CAACE,EAAE,CAAC;EACR,CAAC;EACDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC7B,IAAI,CAACL,KAAK,EAAE;IACRI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B;EACJ;EACA,MAAMC,UAAU,GAAGb,GAAG,CAACD,OAAO,EAAG,UAASQ,KAAK,CAACO,IAAK,EAAC,CAAC;EACvD,MAAMC,UAAU,GAAGd,oBAAoB,CAACY,UAAU,EAAEN,KAAK,CAAC;EAC1DI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EAClBQ,UAAU,CAACC,EAAE,CACT,eAAe,EACdC,QAAQ,IAAK;IACV,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAACI,gBAAgB,GAAGJ,QAAQ,CAACK,UAAU,CAAC,GAAG,GAAG;IAC9E;EACJ,CAAC,EACAC,GAAG,IAAK;IACLZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;IAChBC,KAAK,CAACD,GAAG,CAAC;EACd,CAAC,EACD,MAAM;IACFrB,cAAc,CAACa,UAAU,CAACE,QAAQ,CAACjB,GAAG,CAAC,CAACyB,IAAI,CAAC,MAAOC,WAAW,IAAK;MAChE,MAAMC,MAAM,GAAG,MAAMvB,MAAM,CAACD,UAAU,CAACL,EAAE,EAAE,MAAM,CAAC,EAAE;QAChD8B,SAAS,EAAEvB,eAAe,EAAE;QAE5BwB,QAAQ,EAAEH;MACd,CAAC,CAAC;MACFf,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEe,MAAM,CAACG,EAAE,CAAC;MACpD;MACAnB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,WAAW,CAAC;IACjD,CAAC,CAAC;EAGN,CAAC,CACJ;EACD,oBACI;IAAA,wBACI,QAAC,KAAK;MAAC,IAAI,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eACrB,QAAC,MAAM;MAAC,IAAI,EAAC,QAAQ;MAAC,OAAO,EAAEjB,WAAY;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAEzD;AAEd;AAAC,GA7CQH,WAAW;AAAA,KAAXA,WAAW;AA+CpB,eAAeA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}