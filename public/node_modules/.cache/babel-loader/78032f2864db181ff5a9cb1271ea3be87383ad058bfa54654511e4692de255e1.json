{"ast":null,"code":"var _jsxFileName = \"/home/mohdasim/code/asus laptop/zenith/zenith-web/src/Form.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import { db } from './fireBaseConfig';\n// import { collection, addDoc } from \"firebase/firestore\";\nimport { db, storage } from \"./fireBaseConfig\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\nimport Input from '@mui/material/Input';\nimport Button from '@mui/material/Button';\n\n// Create an initial document to update.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Form() {\n  _s();\n  const [Input, setInput] = useState();\n  const [image, setImage] = useState();\n  const handleFile = e => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n      // console.log(file);\n    }\n  };\n\n  const handleUpload = () => {\n    console.log(\"imageUploading\");\n    if (!image) {\n      console.log(\"image not found\");\n      return;\n    }\n    const storageRef = ref(storage, `images/${image.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, image);\n    console.log(image);\n    uploadTask.on(\"state_changed\", snapshot => {\n      const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      // setProgress(prog)\n    }, err => {\n      console.log(err);\n      alert(err);\n    }, () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n        const docRef = await addDoc(collection(db, \"info\"), {\n          timestamp: serverTimestamp(),\n          imageurl: downloadURL\n        });\n        console.log(\"Document written with ID: \", docRef.id);\n        // setUrl(downloadURL)\n        console.log('File available at', downloadURL);\n      });\n    });\n    console.log('hello');\n  };\n  // console.log(file);\n  // const uploadDocument = async () => {\n  //     const docRef = await addDoc(collection(db, \"teamInfo\"), {\n  //         name: \"Tokyo\",\n  //         sport: \"Cricket\",\n  //         imageUrl:\"qwerer\",\n  //         contact:\"262265444\"\n  //     });\n  //     console.log(\"Document written with ID: \", docRef.id);\n  // }\n  // uploadDocument();\n  const handleChange = e => {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n}\n_s(Form, \"WhlkNG88SlZa9wRtQgj67yni1CY=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","db","storage","ref","uploadBytesResumable","getDownloadURL","collection","addDoc","serverTimestamp","Input","Button","Form","setInput","image","setImage","handleFile","e","target","files","handleUpload","console","log","storageRef","name","uploadTask","on","snapshot","prog","Math","round","bytesTransferred","totalBytes","err","alert","then","downloadURL","docRef","timestamp","imageurl","id","handleChange"],"sources":["/home/mohdasim/code/asus laptop/zenith/zenith-web/src/Form.js"],"sourcesContent":["import React, { useState } from 'react'\n// import { db } from './fireBaseConfig';\n// import { collection, addDoc } from \"firebase/firestore\";\nimport { db, storage } from \"./fireBaseConfig\"\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\nimport Input from '@mui/material/Input';\nimport Button from '@mui/material/Button';\n\n// Create an initial document to update.\n\nfunction Form() {\n    const [Input, setInput] = useState();\n    const [image, setImage] = useState();\n    const handleFile = (e) => {\n        if (e.target.files[0]) {\n            setImage( e.target.files[0] )\n            // console.log(file);\n        }\n    }\n    const handleUpload = () => {\n        console.log(\"imageUploading\")\n        if (!image) {\n            console.log(\"image not found\");\n            return\n        }\n        const storageRef = ref(storage, `images/${image.name}`)\n        const uploadTask = uploadBytesResumable(storageRef, image)\n        console.log(image)\n        uploadTask.on(\n            \"state_changed\",\n            (snapshot) => {\n                const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                // setProgress(prog)\n            },\n            (err) => {\n                console.log(err)\n                alert(err)\n            },\n            () => {\n                getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n                    const docRef = await addDoc(collection(db, \"info\"), {\n                        timestamp: serverTimestamp(),\n\n                        imageurl: downloadURL\n                    });\n                    console.log(\"Document written with ID: \", docRef.id);\n                    // setUrl(downloadURL)\n                    console.log('File available at', downloadURL);\n                });\n\n\n            }\n        )\n        console.log('hello')\n\n    }\n    // console.log(file);\n    // const uploadDocument = async () => {\n    //     const docRef = await addDoc(collection(db, \"teamInfo\"), {\n    //         name: \"Tokyo\",\n    //         sport: \"Cricket\",\n    //         imageUrl:\"qwerer\",\n    //         contact:\"262265444\"\n    //     });\n    //     console.log(\"Document written with ID: \", docRef.id);\n    // }\n    // uploadDocument();\n    const handleChange = (e)=>{\n\n    }\n\n    return (\n        <>\n        \n<Button>Submit</Button>\n        </>\n    )\n}\n\nexport default Form"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA;AACA,SAASC,EAAE,EAAEC,OAAO,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAC5E,SAASC,UAAU,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAoB;AACxE,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;;AAEzC;AAAA;AAAA;AAEA,SAASC,IAAI,GAAG;EAAA;EACZ,MAAM,CAACF,KAAK,EAAEG,QAAQ,CAAC,GAAGZ,QAAQ,EAAE;EACpC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,EAAE;EACpC,MAAMe,UAAU,GAAIC,CAAC,IAAK;IACtB,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MACnBJ,QAAQ,CAAEE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;MAC7B;IACJ;EACJ,CAAC;;EACD,MAAMC,YAAY,GAAG,MAAM;IACvBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,IAAI,CAACR,KAAK,EAAE;MACRO,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B;IACJ;IACA,MAAMC,UAAU,GAAGnB,GAAG,CAACD,OAAO,EAAG,UAASW,KAAK,CAACU,IAAK,EAAC,CAAC;IACvD,MAAMC,UAAU,GAAGpB,oBAAoB,CAACkB,UAAU,EAAET,KAAK,CAAC;IAC1DO,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;IAClBW,UAAU,CAACC,EAAE,CACT,eAAe,EACdC,QAAQ,IAAK;MACV,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAACI,gBAAgB,GAAGJ,QAAQ,CAACK,UAAU,CAAC,GAAG,GAAG;MAC9E;IACJ,CAAC,EACAC,GAAG,IAAK;MACLZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;MAChBC,KAAK,CAACD,GAAG,CAAC;IACd,CAAC,EACD,MAAM;MACF3B,cAAc,CAACmB,UAAU,CAACE,QAAQ,CAACvB,GAAG,CAAC,CAAC+B,IAAI,CAAC,MAAOC,WAAW,IAAK;QAChE,MAAMC,MAAM,GAAG,MAAM7B,MAAM,CAACD,UAAU,CAACL,EAAE,EAAE,MAAM,CAAC,EAAE;UAChDoC,SAAS,EAAE7B,eAAe,EAAE;UAE5B8B,QAAQ,EAAEH;QACd,CAAC,CAAC;QACFf,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEe,MAAM,CAACG,EAAE,CAAC;QACpD;QACAnB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,WAAW,CAAC;MACjD,CAAC,CAAC;IAGN,CAAC,CACJ;IACDf,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EAExB,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMmB,YAAY,GAAIxB,CAAC,IAAG,CAE1B,CAAC;EAED,oBACI;IAAA,uBAER,QAAC,MAAM;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA;EAAS,iBACZ;AAEX;AAAC,GAnEQL,IAAI;AAAA,KAAJA,IAAI;AAqEb,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}